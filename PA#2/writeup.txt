I began by creating an html file with a form and text input.  I used Javascript to detect when a key was pressed to trigger an Ajax function.  I wrote a console application to trim the original wiki-title file to titles with only normal alphabet letters – no numbers or special characters – as well as convert the dashes into spaces so that they will appear as intended.  I followed the in-class demonstration of how to upload documents onto the blog storage on Azure using Azure explorer.  

After it was uploaded, I created getQuerySuggestions.cs (written in C#) to write webmethods.  I have two primary webmethods that does the main function of the website.  The getWords method accesses the online blob storage and uses a StreamReader to add titles to a List of strings.  Initially, I tested this method using 1,000,000 to iterate through the blob text.  It wasn’t until towards the end when we discussed PerformanceCounter in class that I changed the iteration method to include PerformanceCounter results in a while loop.  The second primary webmethod is getSuggestions method which takes the inputted string from the form and finds words in the list of titles that begin the same way, regardless of casing, until ten titles are found and added to another list of strings, which is then returned and presented to the user.  If no matching results are found, the displays a message stating so.  I included other webmethods that are either helper methods or help with debugging such as a count of how many titles have been added.  The getSuggestions method is triggered by an Ajax call with each key press and presents the list of suggestions to the user.

GetWords which creates the dictionary list of titles must be created before any results can be returned to the user.  In order to move my website to an Azure Cloud Service, I needed to install Update 4 for Visual Studios which took 2 hours for some reason.  I was able to run on localhost but found that I needed to call the getWords service each time to create the dictionary before I could test the website.  After publishing it, this was also the case.  To address this, I used uptimerobot as discussed to ping my website every 5 minutes to keep the dictionary available.  Even though I did not use a trie, results appear very quickly.  My dictionary contains titles from A to BZZ.  These results return nearly instantaneously, however with the way I implemented this, results should return increasingly slower the further down the alphabet I search.  But for the available results, they respond very quickly.  The only issue is some key press detection lag when typing quickly because the javascript calls the method to search with each key press.  There is also a bug where deleting text until there is an empty form presents the results of A.
